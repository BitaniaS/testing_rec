{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bkete\\\\OneDrive\\\\Desktop\\\\IS\\\\testing_rec\\\\my-rec\\\\src\\\\forms.js\";\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\n// Define the initial values for the checkboxes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  selectedOptions: [] // This will store the keys of the selected options\n};\n\n// Define the Yup validation schema\nconst validationSchema = Yup.object().shape({\n  selectedOptions: Yup.array().of(Yup.string()).min(1, 'You must select at least one option') // Require at least one option to be selected\n  .required('You must select at least one option') // Make the selection required\n});\n\n// Define your component\nconst MyForm = () => /*#__PURE__*/_jsxDEV(Formik, {\n  initialValues: initialValues,\n  validationSchema: validationSchema,\n  onSubmit: values => {\n    console.log(values);\n    // Process the form submission here\n  },\n  children: ({\n    errors,\n    touched\n  }) => /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      role: \"group\",\n      \"aria-labelledby\": \"checkbox-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          type: \"checkbox\",\n          name: \"selectedOptions\",\n          value: \"Option1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), \"Option 1\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          type: \"checkbox\",\n          name: \"selectedOptions\",\n          value: \"Option2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), \"Option 2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          type: \"checkbox\",\n          name: \"selectedOptions\",\n          value: \"Option3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), \"Option 3\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), errors.selectedOptions && touched.selectedOptions ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.selectedOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 20,\n  columnNumber: 3\n}, this);\n_c = MyForm;\nexport default MyForm;\nvar _c;\n$RefreshReg$(_c, \"MyForm\");","map":{"version":3,"names":["React","Formik","Form","Field","Yup","jsxDEV","_jsxDEV","initialValues","selectedOptions","validationSchema","object","shape","array","of","string","min","required","MyForm","onSubmit","values","console","log","children","errors","touched","role","type","name","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bkete/OneDrive/Desktop/IS/testing_rec/my-rec/src/forms.js"],"sourcesContent":["import React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n// Define the initial values for the checkboxes\r\nconst initialValues = {\r\n  selectedOptions: [], // This will store the keys of the selected options\r\n};\r\n\r\n// Define the Yup validation schema\r\nconst validationSchema = Yup.object().shape({\r\n  selectedOptions: Yup.array()\r\n    .of(Yup.string())\r\n    .min(1, 'You must select at least one option') // Require at least one option to be selected\r\n    .required('You must select at least one option'), // Make the selection required\r\n});\r\n\r\n// Define your component\r\nconst MyForm = () => (\r\n  <Formik\r\n    initialValues={initialValues}\r\n    validationSchema={validationSchema}\r\n    onSubmit={(values) => {\r\n      console.log(values);\r\n      // Process the form submission here\r\n    }}\r\n  >\r\n    {({ errors, touched }) => (\r\n      <Form>\r\n        <div role=\"group\" aria-labelledby=\"checkbox-group\">\r\n          <label>\r\n            <Field type=\"checkbox\" name=\"selectedOptions\" value=\"Option1\" />\r\n            Option 1\r\n          </label>\r\n          <label>\r\n            <Field type=\"checkbox\" name=\"selectedOptions\" value=\"Option2\" />\r\n            Option 2\r\n          </label>\r\n          <label>\r\n            <Field type=\"checkbox\" name=\"selectedOptions\" value=\"Option3\" />\r\n            Option 3\r\n          </label>\r\n          {/* ... add more checkboxes as needed */}\r\n        </div>\r\n        \r\n        {errors.selectedOptions && touched.selectedOptions ? (\r\n          <div>{errors.selectedOptions}</div>\r\n        ) : null}\r\n\r\n        <button type=\"submit\">Submit</button>\r\n      </Form>\r\n    )}\r\n  </Formik>\r\n);\r\n\r\nexport default MyForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}